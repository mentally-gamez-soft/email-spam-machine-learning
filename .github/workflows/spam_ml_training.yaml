# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Spam Emails Machine Learning Trainer Web Service

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ${{matrix.os}}
    env:
      DOCKER_USER: ${{secrets.DOCKER_USERNAME}}
      DOCKER_PASS: ${{secrets.DOCKER_PASSWORD}}
      DOCKER_IMG_NAME: ${{secrets.DOCKER_IMAGE_NAME}}:ws-email-scoring-
    strategy:
      matrix:
        os: [ubuntu-latest]
        #version: ['3.11.6','3.11','3.10','3.9']
        version: ['3.11.6']

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.9 to 3.11.6
      uses: actions/setup-python@v3
      with:
        python-version: ${{matrix.version}}
    - name: Install dependencies with pip-compile tool
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools
        pip-compile requirements.in
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with unittest
      run: |
        # pytest
        python -m unittest tests/test_data_sanitizer.py
      env:
        APP_ENV: cicd_runner
        HOSTNAME: github_action_runner_host
        APP_INCOMING_CONNECTIONS: localhost
        DOCKER_REGISTRY: dummy_registry
        DEBUG: True
        DB_NAME: dummy_db
        DB_USER: dummy_db_user
        DB_PASSWORD: dummy_db_pwd
        DB_PORT: 1111
        REDIS_PORT: 2222
    - name: docker build application image
      run: |
        docker build --build-arg version_number=$DOCKER_IMG_VERSION -t $DOCKER_USER/$DOCKER_IMG_NAME$DOCKER_IMG_VERSION .
      env:
        DOCKER_IMG_VERSION: 2.0.0a
    - name: docker login
      run: |
        docker login -u $DOCKER_USER -p $DOCKER_PASS
    - name: docker push application image
      run: |
        docker push $DOCKER_USER/$DOCKER_IMG_NAME$DOCKER_IMG_VERSION   
      env:
          DOCKER_IMG_VERSION: 2.0.0a
    - name: deploy application image on staging environment
      run: |
        echo "${{ secrets.SSH_DEV_SERVER_CONTABO }}" > ~/work/_temp/dev_server_rsa
        chmod 400 ~/work/_temp/dev_server_rsa
        ssh -o StrictHostKeyChecking=no -i ~/work/_temp/dev_server_rsa ${{secrets.SERVER_ADMIN_INTEG}}@${{secrets.SERVER_HOSTNAME_INTEG}} "
          docker login -u $DOCKER_USER -p $DOCKER_PASS && 
          source .profile &&         
          docker-compose -f $EMAIL_SCORING_APP/docker-compose-email-scoring.yaml down &&
          docker-compose -f $EMAIL_SCORING_APP/docker-compose-email-scoring.yaml up -d"
        rm -f ~/work/_temp/dev_server_rsa
        rm -rf ~/work/_temp

      # docker ps -aq | xargs docker stop | xargs docker rm
      # docker run -d -p 5000:5000 $DOCKER_USER/$DOCKER_IMG_NAME"
