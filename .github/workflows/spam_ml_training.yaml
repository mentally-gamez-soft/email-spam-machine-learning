# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Spam Emails Machine Learning Trainer

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ${{matrix.os}}
    env:
      DOCKER_USER: ${{secrets.DOCKER_USERNAME}}
      DOCKER_PASS: ${{secrets.DOCKER_PASSWORD}}
      DOCKER_IMG_NAME: ${{secrets.DOCKER_IMAGE_NAME}}:ws-spam-model-updater-1.2.1e
    strategy:
      matrix:
        os: [ubuntu-latest]
        # version: ['3.11', '3.10', '3.9', '3.8']
        version: ['3.10']

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: ${{matrix.version}}
    - name: Install dependencies with pip-compile tool
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools
        pip-compile requirements.in
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with unittest
      run: |
        # pytest
        python -m unittest tests/test_data_sanitizer.py
    - name: docker build application image
      run: |
        docker build -t $DOCKER_USER/$DOCKER_IMG_NAME .
    - name: docker login
      run: |
        docker login -u $DOCKER_USER -p $DOCKER_PASS
    - name: docker push application image
      run: |
        docker push $DOCKER_USER/$DOCKER_IMG_NAME   
    - name: deploy on dev server 
      run: |
        echo "${{ secrets.SSH_DEV_SERVER_CONTABO }}" > ~/work/_temp/dev_server_rsa
        chmod 400 ~/work/_temp/dev_server_rsa
        ssh -o StrictHostKeyChecking=no -i ~/work/_temp/dev_server_rsa root@75.119.152.85 "
          docker login -u $DOCKER_USER -p $DOCKER_PASS && 
          source .profile &&         
          docker-compose -f /root/delivery/docker-compose.yaml down &&
          docker-compose -f /root/delivery/docker-compose.yaml up -d"
        rm -f ~/work/_temp/dev_server_rsa
      
      # docker ps -aq | xargs docker stop | xargs docker rm
      # docker run -d -p 5000:5000 $DOCKER_USER/$DOCKER_IMG_NAME"
